////////////////////////////////////////////////////////////////////
// Elevator Domain
//
// Author: Tom Walsh (thomasjwalsh [at] gmail.com)
//
// Edited for competition and translation purposes by Scott Sanner.
//
// The "new_elevators" domain has a number of new_elevators delivering passengers 
// to either the top or the bottom floor (the only allowable destinations).
// Potential passengers arrive at a floor based on Bernoulli draws 
// with a potentially different arrival probability for each floor.  
//
// The elevator can move in its current direction if the doors are closed,
// can remain stationary (noop), or can open its door while indicating
// the direction that it will go in next (this allows potential passengers
// to determine whether to board or not).  Note that the elevator can only
// change direction by opening its door while indicating the opposite 
// direction. 
//
// A passable plan in this domain is to pick up a passenger every time 
// they appear and take them to their destination.  A better plan includes 
// having the elevator "hover" near floors where passengers are likely to 
// arrive and coordinating multiple new_elevators for up and down passengers.
//
// This domain was designed to support extension to multiple new_elevators
// and may be used in either single or multi-elevator mode.
////////////////////////////////////////////////////////////////////

domain new_elevators_mdp {
	
	requirements = { 
		constrained-state,
		reward-deterministic
	};
	
	types {
  		elevator : object;
 	  	floor    : object;
	}; 
	
	pvariables { 
	
		// Probability someone arrives at the floor (up or down)
		ARRIVE-PARAM(floor) : { non-fluent, real, default = 0.0 }; 		  		
		
		// Penalty for persons in the elevator going in right/wrong direction
		// Note: a constant 1.0 penalty for people waiting at a floor 
		ELEVATOR-PENALTY-RIGHT-DIR : { non-fluent, real, default = 0.75 };
		ELEVATOR-PENALTY-WRONG-DIR : { non-fluent, real, default = 3.00 };

		// Useful definitions
		TOP-FLOOR(floor)          : { non-fluent, bool, default = false };
   		BOTTOM-FLOOR(floor)       : { non-fluent, bool, default = false };
		ADJACENT-UP(floor, floor) : { non-fluent, bool, default = false }; 		  		
		
		// Person waiting state
		person-waiting-up(floor)   : { state-fluent, bool, default = false };
		person-waiting-down(floor) : { state-fluent, bool, default = false };
		person-in-elevator-going-up(elevator)   : { state-fluent, bool, default = false };
		person-in-elevator-going-down(elevator) : { state-fluent, bool, default = false };
		
		// Elevator state
		elevator-dir-up(elevator) : { state-fluent, bool, default = true };
		elevator-closed(elevator) : { state-fluent, bool, default = true };
		elevator-at-floor(elevator, floor) : { state-fluent, bool, default = false };

		// Actions: the elevator must move in one direction, it can only switch
		//          direction by signaling the change when the door opens
		//          (i.e., the passengers must know which direction the 
		//           elevator is going before they get on... then the elevator
		//           is constrained to go in that direction when the door closes).
		move-current-dir(elevator)     : { action-fluent, bool, default = false };
		open-door-going-up(elevator)   : { action-fluent, bool, default = false };
		open-door-going-down(elevator) : { action-fluent, bool, default = false };
		close-door(elevator)           : { action-fluent, bool, default = false };
	};
  
	cpfs {
		
		// We might even allow people to get off the elevator if it switches
		// directions on them while they're in it, but we won't model this now.
		
		// A person is waiting unless they get on an elevator going in their
		// direction.
		person-waiting-up'(?f) = 
			if (person-waiting-up(?f) ^ 
				~exists_{?e: elevator} [elevator-at-floor(?e, ?f) ^ elevator-dir-up(?e) ^ ~elevator-closed(?e)])
			then KronDelta(true) 
			else Bernoulli(ARRIVE-PARAM(?f));
			
		person-waiting-down'(?f) = 
			if (person-waiting-down(?f) ^ 
				~exists_{?e: elevator} [elevator-at-floor(?e, ?f) ^ ~elevator-dir-up(?e) ^ ~elevator-closed(?e)])
			then KronDelta(true) 
			else Bernoulli(ARRIVE-PARAM(?f));
  		
  		// A person is in the elevator going in a direction if someone gets on 
  		// in that direction or someone was already on in that direction and does
  		// not get off.
  		person-in-elevator-going-up'(?e) = 
  			if (person-in-elevator-going-up(?e))
  				// If elevator not at top floor then stays true, otherwise set to false
  				then KronDelta( ~exists_{?f : floor} [elevator-at-floor(?e, ?f) ^ TOP-FLOOR(?f)] )
  			else
  				// No one in elevator going up... can only be true if someone going up gets in
  				KronDelta( exists_{?f : floor} 
  					[ elevator-at-floor(?e, ?f) ^ elevator-dir-up(?e) ^ 
  					  ~elevator-closed(?e) ^ person-waiting-up(?f) ] );

  		person-in-elevator-going-down'(?e) = 
  			if (person-in-elevator-going-down(?e))
  				// If elevator not at bottom floor then stays true, otherwise set to false
  				then KronDelta( ~exists_{?f : floor} [elevator-at-floor(?e, ?f) ^ BOTTOM-FLOOR(?f)] )
  			else
  				// No one in elevator going up... can only be true if someone going up gets in
  				KronDelta( exists_{?f : floor} 
  					[ elevator-at-floor(?e, ?f) ^ ~elevator-dir-up(?e) ^ 
  					  ~elevator-closed(?e) ^ person-waiting-down(?f) ] );
  		
		// Elevator needs to be explicitly closed
		elevator-closed'(?e) = 
			KronDelta([elevator-closed(?e) ^ ~open-door-going-up(?e) ^ ~open-door-going-down(?e)] 
					  | close-door(?e));

		// Elevator's destination is set when door is opened (to signal
		// to people which direction the elevator is going)
		elevator-dir-up'(?e) = 
			if (open-door-going-up(?e))
				then KronDelta(true)
			else if (open-door-going-down(?e))
				then KronDelta(false)
			else 
				// If not explicitly set then previous direction persists
				KronDelta( elevator-dir-up(?e) );
		
		// Elevator movement
		//
		// Note: if the elevator should pause at a floor, it can simply open
		//       do noops (all actions false).
		elevator-at-floor'(?e, ?f) =
		
			//////////////////////////////////////////////////////////////////
			// Elevator does not move if door is open or elevator does not move
			//////////////////////////////////////////////////////////////////
			if (~elevator-closed(?e) | ~move-current-dir(?e))
				then KronDelta( elevator-at-floor(?e, ?f) )

			//////////////////////////////////////////////////////////////////
			// These handle the floor that is moved to
			//////////////////////////////////////////////////////////////////
			else if (move-current-dir(?e) ^ elevator-dir-up(?e) ^ exists_{?cur : floor} 
					 [elevator-at-floor(?e, ?cur) ^ ADJACENT-UP(?cur,?f)])
				then KronDelta(true)
			else if (move-current-dir(?e) ^ ~elevator-dir-up(?e) ^ exists_{?cur : floor} 
						[elevator-at-floor(?e, ?cur) ^ ADJACENT-UP(?f,?cur)])
				then KronDelta(true)

			//////////////////////////////////////////////////////////////////
			// These handle failed actions -- stay at current floor
			//////////////////////////////////////////////////////////////////
			else if (move-current-dir(?e) ^ elevator-dir-up(?e) ^ ~exists_{?next : floor} 
					 [elevator-at-floor(?e, ?f) ^ ADJACENT-UP(?f,?next)])
				then KronDelta( elevator-at-floor(?e, ?f) )
			else if (move-current-dir(?e) ^ ~elevator-dir-up(?e) ^ ~exists_{?next : floor} 
						[elevator-at-floor(?e, ?f) ^ ADJACENT-UP(?next,?f)])
				then KronDelta( elevator-at-floor(?e, ?f) )

			//////////////////////////////////////////////////////////////////
			// Otherwise elevator ?e does not move to floor ?f
			//////////////////////////////////////////////////////////////////
			else
				// If here, state persists
				KronDelta( false ); 
	};
  
  	// Reward is a sum of waiting penalties for those in new_elevators and at floor
	reward = 
		[sum_{?e: elevator} [
			-ELEVATOR-PENALTY-RIGHT-DIR * (person-in-elevator-going-up(?e) ^ elevator-dir-up(?e))
		]] + 
		[sum_{?e: elevator} [
			-ELEVATOR-PENALTY-RIGHT-DIR * (person-in-elevator-going-down(?e) ^ ~elevator-dir-up(?e))
		]] + 
		[sum_{?e: elevator} [
			-ELEVATOR-PENALTY-WRONG-DIR * (person-in-elevator-going-up(?e) ^ ~elevator-dir-up(?e))
		]] + 
		[sum_{?e: elevator} [
			-ELEVATOR-PENALTY-WRONG-DIR * (person-in-elevator-going-down(?e) ^ elevator-dir-up(?e))
		]] + 
		[sum_{?f: floor} [
			- person-waiting-up(?f) - person-waiting-down(?f)
		]];

	state-action-constraints {
		// Can check uniqueness constraint in many ways, but for simulator easiest 
		// is just to count.
//		forall_{?e : elevator} ([sum_{?f: floor} elevator-at-floor(?e, ?f)] == 1);
		
		// Max of one action per elevator.
		forall_{?e : elevator} [(open-door-going-up(?e) + open-door-going-down(?e) + close-door(?e) + move-current-dir(?e)) <= 1];
		
		// All floors except top and bottom must have one adjacent floor above/below
//		forall_{?f : floor} [ TOP-FLOOR(?f) | (sum_{?fup : floor} ADJACENT-UP(?f,?fup)) == 1 ];
//		forall_{?f : floor} [ BOTTOM-FLOOR(?f) | (sum_{?fdown : floor} ADJACENT-UP(?fdown,?f)) == 1 ];
	};
}


non-fluents nf_new_elevators_inst_mdp__11 {
	domain = new_elevators_mdp; 
	objects { 
		elevator : {e0,e1};
		floor : {f0,f1,f2,f3,f4,f5,f6,f7 }; 
	}; 
	non-fluents {
		ELEVATOR-PENALTY-RIGHT-DIR = 0.75;
		ELEVATOR-PENALTY-WRONG-DIR = 3.0;
		ADJACENT-UP(f0,f1) = true;
		ARRIVE-PARAM(f1) = 0.03089042;
		ADJACENT-UP(f1,f2) = true;
		ARRIVE-PARAM(f2) = 0.014221892;
		ADJACENT-UP(f2,f3) = true;
		ARRIVE-PARAM(f3) = 0.036252443;
		ADJACENT-UP(f3,f4) = true;
		ARRIVE-PARAM(f4) = 0.019006431;
		ADJACENT-UP(f4,f5) = true;
		ARRIVE-PARAM(f5) = 0.03132367;
		ADJACENT-UP(f5,f6) = true;
		ARRIVE-PARAM(f6) = 0.03298297;
		ADJACENT-UP(f6,f7) = true;
		TOP-FLOOR(f7) = true;
		BOTTOM-FLOOR(f0) = true;
 	}; 
 }
instance new_elevators_inst_mdp__11 { 
	domain = new_elevators_mdp; 
 	non-fluents = nf_new_elevators_inst_mdp__11;
	init-state { 
		elevator-at-floor(e0,f0);
		elevator-at-floor(e1,f0);
	};
	max-nondef-actions = 2;
	horizon = 40;
	discount = 1.0;
} 


non-fluents nf_new_elevators_inst_mdp__12 {
	domain = new_elevators_mdp; 
	objects { 
		elevator : {e0,e1,e2};
		floor : {f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11 }; 
	}; 
	non-fluents {
		ELEVATOR-PENALTY-RIGHT-DIR = 0.75;
		ELEVATOR-PENALTY-WRONG-DIR = 3.0;
		ADJACENT-UP(f0,f1) = true;
		ARRIVE-PARAM(f1) = 0.018734198;
		ADJACENT-UP(f1,f2) = true;
		ARRIVE-PARAM(f2) = 0.020448348;
		ADJACENT-UP(f2,f3) = true;
		ARRIVE-PARAM(f3) = 0.009550142;
		ADJACENT-UP(f3,f4) = true;
		ARRIVE-PARAM(f4) = 0.017061794;
		ADJACENT-UP(f4,f5) = true;
		ARRIVE-PARAM(f5) = 0.016763998;
		ADJACENT-UP(f5,f6) = true;
		ARRIVE-PARAM(f6) = 0.0135713;
		ADJACENT-UP(f6,f7) = true;
		ARRIVE-PARAM(f7) = 0.016292049;
		ADJACENT-UP(f7,f8) = true;
		ARRIVE-PARAM(f8) = 0.014219771;
		ADJACENT-UP(f8,f9) = true;
		ARRIVE-PARAM(f9) = 0.016269702;
		ADJACENT-UP(f9,f10) = true;
		ARRIVE-PARAM(f10) = 0.015650637;
		ADJACENT-UP(f10,f11) = true;
		TOP-FLOOR(f11) = true;
		BOTTOM-FLOOR(f0) = true;
 	}; 
 }
instance new_elevators_inst_mdp__12 { 
	domain = new_elevators_mdp; 
 	non-fluents = nf_new_elevators_inst_mdp__12;
	init-state { 
		elevator-at-floor(e0,f0);
		elevator-at-floor(e1,f0);
		elevator-at-floor(e2,f0);
	};
	max-nondef-actions = 3;
	horizon = 40;
	discount = 1.0;
} 



non-fluents nf_new_elevators_inst_mdp__13 {
	domain = new_elevators_mdp; 
	objects { 
		elevator : {e0,e1,e2,e3};
		floor : {f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15 }; 
	}; 
	non-fluents {
		ELEVATOR-PENALTY-RIGHT-DIR = 0.75;
		ELEVATOR-PENALTY-WRONG-DIR = 3.0;
		ADJACENT-UP(f0,f1) = true;
		ARRIVE-PARAM(f1) = 0.017480696;
		ADJACENT-UP(f1,f2) = true;
		ARRIVE-PARAM(f2) = 0.0151007585;
		ADJACENT-UP(f2,f3) = true;
		ARRIVE-PARAM(f3) = 0.013330033;
		ADJACENT-UP(f3,f4) = true;
		ARRIVE-PARAM(f4) = 0.009111647;
		ADJACENT-UP(f4,f5) = true;
		ARRIVE-PARAM(f5) = 0.008751203;
		ADJACENT-UP(f5,f6) = true;
		ARRIVE-PARAM(f6) = 0.013633735;
		ADJACENT-UP(f6,f7) = true;
		ARRIVE-PARAM(f7) = 0.014029233;
		ADJACENT-UP(f7,f8) = true;
		ARRIVE-PARAM(f8) = 0.014822356;
		ADJACENT-UP(f8,f9) = true;
		ARRIVE-PARAM(f9) = 0.008438258;
		ADJACENT-UP(f9,f10) = true;
		ARRIVE-PARAM(f10) = 0.011829264;
		ADJACENT-UP(f10,f11) = true;
		ARRIVE-PARAM(f11) = 0.006352099;
		ADJACENT-UP(f11,f12) = true;
		ARRIVE-PARAM(f12) = 0.00820284;
		ADJACENT-UP(f12,f13) = true;
		ARRIVE-PARAM(f13) = 0.012091592;
		ADJACENT-UP(f13,f14) = true;
		ARRIVE-PARAM(f14) = 0.009308526;
		ADJACENT-UP(f14,f15) = true;
		TOP-FLOOR(f15) = true;
		BOTTOM-FLOOR(f0) = true;
 	}; 
 }
instance new_elevators_inst_mdp__13 { 
	domain = new_elevators_mdp; 
 	non-fluents = nf_new_elevators_inst_mdp__13;
	init-state { 
		elevator-at-floor(e0,f0);
		elevator-at-floor(e1,f0);
		elevator-at-floor(e2,f0);
		elevator-at-floor(e3,f0);
	};
	max-nondef-actions = 4;
	horizon = 40;
	discount = 1.0;
} 


non-fluents nf_new_elevators_inst_mdp__14 {
	domain = new_elevators_mdp; 
	objects { 
		elevator : {e0,e1,e2,e3,e4};
		floor : {f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,f19 }; 
	}; 
	non-fluents {
		ELEVATOR-PENALTY-RIGHT-DIR = 0.75;
		ELEVATOR-PENALTY-WRONG-DIR = 3.0;
		ADJACENT-UP(f0,f1) = true;
		ARRIVE-PARAM(f1) = 0.008212442;
		ADJACENT-UP(f1,f2) = true;
		ARRIVE-PARAM(f2) = 0.005397369;
		ADJACENT-UP(f2,f3) = true;
		ARRIVE-PARAM(f3) = 0.014685497;
		ADJACENT-UP(f3,f4) = true;
		ARRIVE-PARAM(f4) = 0.009989738;
		ADJACENT-UP(f4,f5) = true;
		ARRIVE-PARAM(f5) = 0.014109375;
		ADJACENT-UP(f5,f6) = true;
		ARRIVE-PARAM(f6) = 0.009929168;
		ADJACENT-UP(f6,f7) = true;
		ARRIVE-PARAM(f7) = 0.009225668;
		ADJACENT-UP(f7,f8) = true;
		ARRIVE-PARAM(f8) = 0.014174281;
		ADJACENT-UP(f8,f9) = true;
		ARRIVE-PARAM(f9) = 0.012727809;
		ADJACENT-UP(f9,f10) = true;
		ARRIVE-PARAM(f10) = 0.0062596835;
		ADJACENT-UP(f10,f11) = true;
		ARRIVE-PARAM(f11) = 0.008911972;
		ADJACENT-UP(f11,f12) = true;
		ARRIVE-PARAM(f12) = 0.0060166563;
		ADJACENT-UP(f12,f13) = true;
		ARRIVE-PARAM(f13) = 0.009438529;
		ADJACENT-UP(f13,f14) = true;
		ARRIVE-PARAM(f14) = 0.0071836202;
		ADJACENT-UP(f14,f15) = true;
		ARRIVE-PARAM(f15) = 0.014684658;
		ADJACENT-UP(f15,f16) = true;
		ARRIVE-PARAM(f16) = 0.010361092;
		ADJACENT-UP(f16,f17) = true;
		ARRIVE-PARAM(f17) = 0.005391975;
		ADJACENT-UP(f17,f18) = true;
		ARRIVE-PARAM(f18) = 0.0075551607;
		ADJACENT-UP(f18,f19) = true;
		TOP-FLOOR(f19) = true;
		BOTTOM-FLOOR(f0) = true;
 	}; 
 }
instance new_elevators_inst_mdp__14 { 
	domain = new_elevators_mdp; 
 	non-fluents = nf_new_elevators_inst_mdp__14;
	init-state { 
		elevator-at-floor(e0,f0);
		elevator-at-floor(e1,f0);
		elevator-at-floor(e2,f0);
		elevator-at-floor(e3,f0);
		elevator-at-floor(e4,f0);
	};
	max-nondef-actions = 5;
	horizon = 40;
	discount = 1.0;
} 


non-fluents nf_new_elevators_inst_mdp__15 {
	domain = new_elevators_mdp; 
	objects { 
		elevator : {e0,e1,e2,e3,e4,e5};
		floor : {f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,f19,f20,f21,f22,f23 }; 
	}; 
	non-fluents {
		ELEVATOR-PENALTY-RIGHT-DIR = 0.75;
		ELEVATOR-PENALTY-WRONG-DIR = 3.0;
		ADJACENT-UP(f0,f1) = true;
		ARRIVE-PARAM(f1) = 0.0055914675;
		ADJACENT-UP(f1,f2) = true;
		ARRIVE-PARAM(f2) = 0.0042450493;
		ADJACENT-UP(f2,f3) = true;
		ARRIVE-PARAM(f3) = 0.009688112;
		ADJACENT-UP(f3,f4) = true;
		ARRIVE-PARAM(f4) = 0.012132186;
		ADJACENT-UP(f4,f5) = true;
		ARRIVE-PARAM(f5) = 0.012260593;
		ADJACENT-UP(f5,f6) = true;
		ARRIVE-PARAM(f6) = 0.008028266;
		ADJACENT-UP(f6,f7) = true;
		ARRIVE-PARAM(f7) = 0.012368062;
		ADJACENT-UP(f7,f8) = true;
		ARRIVE-PARAM(f8) = 0.008051138;
		ADJACENT-UP(f8,f9) = true;
		ARRIVE-PARAM(f9) = 0.005399406;
		ADJACENT-UP(f9,f10) = true;
		ARRIVE-PARAM(f10) = 0.008329914;
		ADJACENT-UP(f10,f11) = true;
		ARRIVE-PARAM(f11) = 0.0077754403;
		ADJACENT-UP(f11,f12) = true;
		ARRIVE-PARAM(f12) = 0.006367601;
		ADJACENT-UP(f12,f13) = true;
		ARRIVE-PARAM(f13) = 0.004918488;
		ADJACENT-UP(f13,f14) = true;
		ARRIVE-PARAM(f14) = 0.008818574;
		ADJACENT-UP(f14,f15) = true;
		ARRIVE-PARAM(f15) = 0.0057872;
		ADJACENT-UP(f15,f16) = true;
		ARRIVE-PARAM(f16) = 0.009780309;
		ADJACENT-UP(f16,f17) = true;
		ARRIVE-PARAM(f17) = 0.010301252;
		ADJACENT-UP(f17,f18) = true;
		ARRIVE-PARAM(f18) = 0.010380245;
		ADJACENT-UP(f18,f19) = true;
		ARRIVE-PARAM(f19) = 0.012128353;
		ADJACENT-UP(f19,f20) = true;
		ARRIVE-PARAM(f20) = 0.011412516;
		ADJACENT-UP(f20,f21) = true;
		ARRIVE-PARAM(f21) = 0.007430933;
		ADJACENT-UP(f21,f22) = true;
		ARRIVE-PARAM(f22) = 0.00900711;
		ADJACENT-UP(f22,f23) = true;
		TOP-FLOOR(f23) = true;
		BOTTOM-FLOOR(f0) = true;
 	}; 
 }
instance new_elevators_inst_mdp__15 { 
	domain = new_elevators_mdp; 
 	non-fluents = nf_new_elevators_inst_mdp__15;
	init-state { 
		elevator-at-floor(e0,f0);
		elevator-at-floor(e1,f0);
		elevator-at-floor(e2,f0);
		elevator-at-floor(e3,f0);
		elevator-at-floor(e4,f0);
		elevator-at-floor(e5,f0);
	};
	max-nondef-actions = 6;
	horizon = 40;
	discount = 1.0;
} 


non-fluents nf_new_elevators_inst_mdp__16 {
	domain = new_elevators_mdp; 
	objects { 
		elevator : {e0,e1,e2,e3,e4,e5,e6};
		floor : {f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,f19,f20,f21,f22,f23,f24,f25,f26,f27 }; 
	}; 
	non-fluents {
		ELEVATOR-PENALTY-RIGHT-DIR = 0.75;
		ELEVATOR-PENALTY-WRONG-DIR = 3.0;
		ADJACENT-UP(f0,f1) = true;
		ARRIVE-PARAM(f1) = 0.0051100883;
		ADJACENT-UP(f1,f2) = true;
		ARRIVE-PARAM(f2) = 0.006839239;
		ADJACENT-UP(f2,f3) = true;
		ARRIVE-PARAM(f3) = 0.0036352582;
		ADJACENT-UP(f3,f4) = true;
		ARRIVE-PARAM(f4) = 0.005707073;
		ADJACENT-UP(f4,f5) = true;
		ARRIVE-PARAM(f5) = 0.0076278634;
		ADJACENT-UP(f5,f6) = true;
		ARRIVE-PARAM(f6) = 0.008433109;
		ADJACENT-UP(f6,f7) = true;
		ARRIVE-PARAM(f7) = 0.010199321;
		ADJACENT-UP(f7,f8) = true;
		ARRIVE-PARAM(f8) = 0.0058389637;
		ADJACENT-UP(f8,f9) = true;
		ARRIVE-PARAM(f9) = 0.0046501467;
		ADJACENT-UP(f9,f10) = true;
		ARRIVE-PARAM(f10) = 0.008151851;
		ADJACENT-UP(f10,f11) = true;
		ARRIVE-PARAM(f11) = 0.007533509;
		ADJACENT-UP(f11,f12) = true;
		ARRIVE-PARAM(f12) = 0.0099862125;
		ADJACENT-UP(f12,f13) = true;
		ARRIVE-PARAM(f13) = 0.0038448742;
		ADJACENT-UP(f13,f14) = true;
		ARRIVE-PARAM(f14) = 0.0055776536;
		ADJACENT-UP(f14,f15) = true;
		ARRIVE-PARAM(f15) = 0.00894335;
		ADJACENT-UP(f15,f16) = true;
		ARRIVE-PARAM(f16) = 0.007956;
		ADJACENT-UP(f16,f17) = true;
		ARRIVE-PARAM(f17) = 0.009994378;
		ADJACENT-UP(f17,f18) = true;
		ARRIVE-PARAM(f18) = 0.0042840308;
		ADJACENT-UP(f18,f19) = true;
		ARRIVE-PARAM(f19) = 0.008348952;
		ADJACENT-UP(f19,f20) = true;
		ARRIVE-PARAM(f20) = 0.00482368;
		ADJACENT-UP(f20,f21) = true;
		ARRIVE-PARAM(f21) = 0.0102247605;
		ADJACENT-UP(f21,f22) = true;
		ARRIVE-PARAM(f22) = 0.009718585;
		ADJACENT-UP(f22,f23) = true;
		ARRIVE-PARAM(f23) = 0.0077457833;
		ADJACENT-UP(f23,f24) = true;
		ARRIVE-PARAM(f24) = 0.008784794;
		ADJACENT-UP(f24,f25) = true;
		ARRIVE-PARAM(f25) = 0.008317953;
		ADJACENT-UP(f25,f26) = true;
		ARRIVE-PARAM(f26) = 0.006431111;
		ADJACENT-UP(f26,f27) = true;
		TOP-FLOOR(f27) = true;
		BOTTOM-FLOOR(f0) = true;
 	}; 
 }
instance new_elevators_inst_mdp__16 { 
	domain = new_elevators_mdp; 
 	non-fluents = nf_new_elevators_inst_mdp__16;
	init-state { 
		elevator-at-floor(e0,f0);
		elevator-at-floor(e1,f0);
		elevator-at-floor(e2,f0);
		elevator-at-floor(e3,f0);
		elevator-at-floor(e4,f0);
		elevator-at-floor(e5,f0);
		elevator-at-floor(e6,f0);
	};
	max-nondef-actions = 7;
	horizon = 40;
	discount = 1.0;
} 


non-fluents nf_new_elevators_inst_mdp__17 {
	domain = new_elevators_mdp; 
	objects { 
		elevator : {e0,e1,e2,e3,e4,e5,e6,e7};
		floor : {f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,f19,f20,f21,f22,f23,f24,f25,f26,f27,f28,f29,f30,f31 }; 
	}; 
	non-fluents {
		ELEVATOR-PENALTY-RIGHT-DIR = 0.75;
		ELEVATOR-PENALTY-WRONG-DIR = 3.0;
		ADJACENT-UP(f0,f1) = true;
		ARRIVE-PARAM(f1) = 0.008945568;
		ADJACENT-UP(f1,f2) = true;
		ARRIVE-PARAM(f2) = 0.0050101476;
		ADJACENT-UP(f2,f3) = true;
		ARRIVE-PARAM(f3) = 0.009151808;
		ADJACENT-UP(f3,f4) = true;
		ARRIVE-PARAM(f4) = 0.008307991;
		ADJACENT-UP(f4,f5) = true;
		ARRIVE-PARAM(f5) = 0.0053693503;
		ADJACENT-UP(f5,f6) = true;
		ARRIVE-PARAM(f6) = 0.0045088795;
		ADJACENT-UP(f6,f7) = true;
		ARRIVE-PARAM(f7) = 0.0070675127;
		ADJACENT-UP(f7,f8) = true;
		ARRIVE-PARAM(f8) = 0.0092712585;
		ADJACENT-UP(f8,f9) = true;
		ARRIVE-PARAM(f9) = 0.004730255;
		ADJACENT-UP(f9,f10) = true;
		ARRIVE-PARAM(f10) = 0.00867332;
		ADJACENT-UP(f10,f11) = true;
		ARRIVE-PARAM(f11) = 0.0056510214;
		ADJACENT-UP(f11,f12) = true;
		ARRIVE-PARAM(f12) = 0.009003525;
		ADJACENT-UP(f12,f13) = true;
		ARRIVE-PARAM(f13) = 0.0044208686;
		ADJACENT-UP(f13,f14) = true;
		ARRIVE-PARAM(f14) = 0.008274575;
		ADJACENT-UP(f14,f15) = true;
		ARRIVE-PARAM(f15) = 0.004239039;
		ADJACENT-UP(f15,f16) = true;
		ARRIVE-PARAM(f16) = 0.008381886;
		ADJACENT-UP(f16,f17) = true;
		ARRIVE-PARAM(f17) = 0.007967772;
		ADJACENT-UP(f17,f18) = true;
		ARRIVE-PARAM(f18) = 0.004224495;
		ADJACENT-UP(f18,f19) = true;
		ARRIVE-PARAM(f19) = 0.0033448648;
		ADJACENT-UP(f19,f20) = true;
		ARRIVE-PARAM(f20) = 0.0065369103;
		ADJACENT-UP(f20,f21) = true;
		ARRIVE-PARAM(f21) = 0.0074813347;
		ADJACENT-UP(f21,f22) = true;
		ARRIVE-PARAM(f22) = 0.008648056;
		ADJACENT-UP(f22,f23) = true;
		ARRIVE-PARAM(f23) = 0.0043006926;
		ADJACENT-UP(f23,f24) = true;
		ARRIVE-PARAM(f24) = 0.0031680171;
		ADJACENT-UP(f24,f25) = true;
		ARRIVE-PARAM(f25) = 0.003550508;
		ADJACENT-UP(f25,f26) = true;
		ARRIVE-PARAM(f26) = 0.0046362313;
		ADJACENT-UP(f26,f27) = true;
		ARRIVE-PARAM(f27) = 0.0066288216;
		ADJACENT-UP(f27,f28) = true;
		ARRIVE-PARAM(f28) = 0.0045080534;
		ADJACENT-UP(f28,f29) = true;
		ARRIVE-PARAM(f29) = 0.009235024;
		ADJACENT-UP(f29,f30) = true;
		ARRIVE-PARAM(f30) = 0.005876489;
		ADJACENT-UP(f30,f31) = true;
		TOP-FLOOR(f31) = true;
		BOTTOM-FLOOR(f0) = true;
 	}; 
 }
instance new_elevators_inst_mdp__17 { 
	domain = new_elevators_mdp; 
 	non-fluents = nf_new_elevators_inst_mdp__17;
	init-state { 
		elevator-at-floor(e0,f0);
		elevator-at-floor(e1,f0);
		elevator-at-floor(e2,f0);
		elevator-at-floor(e3,f0);
		elevator-at-floor(e4,f0);
		elevator-at-floor(e5,f0);
		elevator-at-floor(e6,f0);
		elevator-at-floor(e7,f0);
	};
	max-nondef-actions = 8;
	horizon = 40;
	discount = 1.0;
} 


non-fluents nf_new_elevators_inst_mdp__18 {
	domain = new_elevators_mdp; 
	objects { 
		elevator : {e0,e1,e2,e3,e4,e5,e6,e7,e8};
		floor : {f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,f19,f20,f21,f22,f23,f24,f25,f26,f27,f28,f29,f30,f31,f32,f33,f34,f35 }; 
	}; 
	non-fluents {
		ELEVATOR-PENALTY-RIGHT-DIR = 0.75;
		ELEVATOR-PENALTY-WRONG-DIR = 3.0;
		ADJACENT-UP(f0,f1) = true;
		ARRIVE-PARAM(f1) = 0.004043298;
		ADJACENT-UP(f1,f2) = true;
		ARRIVE-PARAM(f2) = 0.006567681;
		ADJACENT-UP(f2,f3) = true;
		ARRIVE-PARAM(f3) = 0.0030170842;
		ADJACENT-UP(f3,f4) = true;
		ARRIVE-PARAM(f4) = 0.0070507377;
		ADJACENT-UP(f4,f5) = true;
		ARRIVE-PARAM(f5) = 0.008009181;
		ADJACENT-UP(f5,f6) = true;
		ARRIVE-PARAM(f6) = 0.0050806236;
		ADJACENT-UP(f6,f7) = true;
		ARRIVE-PARAM(f7) = 0.004188303;
		ADJACENT-UP(f7,f8) = true;
		ARRIVE-PARAM(f8) = 0.0062340107;
		ADJACENT-UP(f8,f9) = true;
		ARRIVE-PARAM(f9) = 0.0067490926;
		ADJACENT-UP(f9,f10) = true;
		ARRIVE-PARAM(f10) = 0.0061813723;
		ADJACENT-UP(f10,f11) = true;
		ARRIVE-PARAM(f11) = 0.0028902425;
		ADJACENT-UP(f11,f12) = true;
		ARRIVE-PARAM(f12) = 0.005016247;
		ADJACENT-UP(f12,f13) = true;
		ARRIVE-PARAM(f13) = 0.0062619173;
		ADJACENT-UP(f13,f14) = true;
		ARRIVE-PARAM(f14) = 0.0053967466;
		ADJACENT-UP(f14,f15) = true;
		ARRIVE-PARAM(f15) = 0.0052941623;
		ADJACENT-UP(f15,f16) = true;
		ARRIVE-PARAM(f16) = 0.002887702;
		ADJACENT-UP(f16,f17) = true;
		ARRIVE-PARAM(f17) = 0.0036179705;
		ADJACENT-UP(f17,f18) = true;
		ARRIVE-PARAM(f18) = 0.007277526;
		ADJACENT-UP(f18,f19) = true;
		ARRIVE-PARAM(f19) = 0.0038521215;
		ADJACENT-UP(f19,f20) = true;
		ARRIVE-PARAM(f20) = 0.004453265;
		ADJACENT-UP(f20,f21) = true;
		ARRIVE-PARAM(f21) = 0.0078006024;
		ADJACENT-UP(f21,f22) = true;
		ARRIVE-PARAM(f22) = 0.0057915873;
		ADJACENT-UP(f22,f23) = true;
		ARRIVE-PARAM(f23) = 0.005959647;
		ADJACENT-UP(f23,f24) = true;
		ARRIVE-PARAM(f24) = 0.0078543825;
		ADJACENT-UP(f24,f25) = true;
		ARRIVE-PARAM(f25) = 0.0065522725;
		ADJACENT-UP(f25,f26) = true;
		ARRIVE-PARAM(f26) = 0.007921811;
		ADJACENT-UP(f26,f27) = true;
		ARRIVE-PARAM(f27) = 0.006743877;
		ADJACENT-UP(f27,f28) = true;
		ARRIVE-PARAM(f28) = 0.004536917;
		ADJACENT-UP(f28,f29) = true;
		ARRIVE-PARAM(f29) = 0.007325237;
		ADJACENT-UP(f29,f30) = true;
		ARRIVE-PARAM(f30) = 0.007882663;
		ADJACENT-UP(f30,f31) = true;
		ARRIVE-PARAM(f31) = 0.0066886097;
		ADJACENT-UP(f31,f32) = true;
		ARRIVE-PARAM(f32) = 0.006805044;
		ADJACENT-UP(f32,f33) = true;
		ARRIVE-PARAM(f33) = 0.0065793437;
		ADJACENT-UP(f33,f34) = true;
		ARRIVE-PARAM(f34) = 0.005381422;
		ADJACENT-UP(f34,f35) = true;
		TOP-FLOOR(f35) = true;
		BOTTOM-FLOOR(f0) = true;
 	}; 
 }
instance new_elevators_inst_mdp__18 { 
	domain = new_elevators_mdp; 
 	non-fluents = nf_new_elevators_inst_mdp__18;
	init-state { 
		elevator-at-floor(e0,f0);
		elevator-at-floor(e1,f0);
		elevator-at-floor(e2,f0);
		elevator-at-floor(e3,f0);
		elevator-at-floor(e4,f0);
		elevator-at-floor(e5,f0);
		elevator-at-floor(e6,f0);
		elevator-at-floor(e7,f0);
		elevator-at-floor(e8,f0);
	};
	max-nondef-actions = 9;
	horizon = 40;
	discount = 1.0;
} 


non-fluents nf_new_elevators_inst_mdp__19 {
	domain = new_elevators_mdp; 
	objects { 
		elevator : {e0,e1,e2,e3,e4,e5,e6,e7,e8,e9};
		floor : {f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,f19,f20,f21,f22,f23,f24,f25,f26,f27,f28,f29,f30,f31,f32,f33,f34,f35,f36,f37,f38,f39 }; 
	}; 
	non-fluents {
		ELEVATOR-PENALTY-RIGHT-DIR = 0.75;
		ELEVATOR-PENALTY-WRONG-DIR = 3.0;
		ADJACENT-UP(f0,f1) = true;
		ARRIVE-PARAM(f1) = 0.007414418;
		ADJACENT-UP(f1,f2) = true;
		ARRIVE-PARAM(f2) = 0.0044512777;
		ADJACENT-UP(f2,f3) = true;
		ARRIVE-PARAM(f3) = 0.0051528374;
		ADJACENT-UP(f3,f4) = true;
		ARRIVE-PARAM(f4) = 0.0056042755;
		ADJACENT-UP(f4,f5) = true;
		ARRIVE-PARAM(f5) = 0.004286962;
		ADJACENT-UP(f5,f6) = true;
		ARRIVE-PARAM(f6) = 0.0044007907;
		ADJACENT-UP(f6,f7) = true;
		ARRIVE-PARAM(f7) = 0.0053828144;
		ADJACENT-UP(f7,f8) = true;
		ARRIVE-PARAM(f8) = 0.003084337;
		ADJACENT-UP(f8,f9) = true;
		ARRIVE-PARAM(f9) = 0.004884099;
		ADJACENT-UP(f9,f10) = true;
		ARRIVE-PARAM(f10) = 0.0032270658;
		ADJACENT-UP(f10,f11) = true;
		ARRIVE-PARAM(f11) = 0.006457073;
		ADJACENT-UP(f11,f12) = true;
		ARRIVE-PARAM(f12) = 0.0040716073;
		ADJACENT-UP(f12,f13) = true;
		ARRIVE-PARAM(f13) = 0.0068266625;
		ADJACENT-UP(f13,f14) = true;
		ARRIVE-PARAM(f14) = 0.0071784807;
		ADJACENT-UP(f14,f15) = true;
		ARRIVE-PARAM(f15) = 0.0040571527;
		ADJACENT-UP(f15,f16) = true;
		ARRIVE-PARAM(f16) = 0.0069213314;
		ADJACENT-UP(f16,f17) = true;
		ARRIVE-PARAM(f17) = 0.0065887226;
		ADJACENT-UP(f17,f18) = true;
		ARRIVE-PARAM(f18) = 0.0028778003;
		ADJACENT-UP(f18,f19) = true;
		ARRIVE-PARAM(f19) = 0.0026218654;
		ADJACENT-UP(f19,f20) = true;
		ARRIVE-PARAM(f20) = 0.0028889612;
		ADJACENT-UP(f20,f21) = true;
		ARRIVE-PARAM(f21) = 0.0038227153;
		ADJACENT-UP(f21,f22) = true;
		ARRIVE-PARAM(f22) = 0.007281705;
		ADJACENT-UP(f22,f23) = true;
		ARRIVE-PARAM(f23) = 0.007410776;
		ADJACENT-UP(f23,f24) = true;
		ARRIVE-PARAM(f24) = 0.0053310446;
		ADJACENT-UP(f24,f25) = true;
		ARRIVE-PARAM(f25) = 0.0051261107;
		ADJACENT-UP(f25,f26) = true;
		ARRIVE-PARAM(f26) = 0.0044101453;
		ADJACENT-UP(f26,f27) = true;
		ARRIVE-PARAM(f27) = 0.005655286;
		ADJACENT-UP(f27,f28) = true;
		ARRIVE-PARAM(f28) = 0.0059688045;
		ADJACENT-UP(f28,f29) = true;
		ARRIVE-PARAM(f29) = 0.0073793745;
		ADJACENT-UP(f29,f30) = true;
		ARRIVE-PARAM(f30) = 0.0033657742;
		ADJACENT-UP(f30,f31) = true;
		ARRIVE-PARAM(f31) = 0.0050137625;
		ADJACENT-UP(f31,f32) = true;
		ARRIVE-PARAM(f32) = 0.007169447;
		ADJACENT-UP(f32,f33) = true;
		ARRIVE-PARAM(f33) = 0.004953722;
		ADJACENT-UP(f33,f34) = true;
		ARRIVE-PARAM(f34) = 0.005302754;
		ADJACENT-UP(f34,f35) = true;
		ARRIVE-PARAM(f35) = 0.007389928;
		ADJACENT-UP(f35,f36) = true;
		ARRIVE-PARAM(f36) = 0.004787541;
		ADJACENT-UP(f36,f37) = true;
		ARRIVE-PARAM(f37) = 0.0060885744;
		ADJACENT-UP(f37,f38) = true;
		ARRIVE-PARAM(f38) = 0.007238335;
		ADJACENT-UP(f38,f39) = true;
		TOP-FLOOR(f39) = true;
		BOTTOM-FLOOR(f0) = true;
 	}; 
 }
instance new_elevators_inst_mdp__19 { 
	domain = new_elevators_mdp; 
 	non-fluents = nf_new_elevators_inst_mdp__19;
	init-state { 
		elevator-at-floor(e0,f0);
		elevator-at-floor(e1,f0);
		elevator-at-floor(e2,f0);
		elevator-at-floor(e3,f0);
		elevator-at-floor(e4,f0);
		elevator-at-floor(e5,f0);
		elevator-at-floor(e6,f0);
		elevator-at-floor(e7,f0);
		elevator-at-floor(e8,f0);
		elevator-at-floor(e9,f0);
	};
	max-nondef-actions = 10;
	horizon = 40;
	discount = 1.0;
} 


non-fluents nf_new_elevators_inst_mdp__20 {
	domain = new_elevators_mdp; 
	objects { 
		elevator : {e0,e1,e2,e3,e4,e5,e6,e7,e8,e9,e10};
		floor : {f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,f19,f20,f21,f22,f23,f24,f25,f26,f27,f28,f29,f30,f31,f32,f33,f34,f35,f36,f37,f38,f39,f40,f41,f42,f43 }; 
	}; 
	non-fluents {
		ELEVATOR-PENALTY-RIGHT-DIR = 0.75;
		ELEVATOR-PENALTY-WRONG-DIR = 3.0;
		ADJACENT-UP(f0,f1) = true;
		ARRIVE-PARAM(f1) = 0.00638145;
		ADJACENT-UP(f1,f2) = true;
		ARRIVE-PARAM(f2) = 0.0068046404;
		ADJACENT-UP(f2,f3) = true;
		ARRIVE-PARAM(f3) = 0.0029488183;
		ADJACENT-UP(f3,f4) = true;
		ARRIVE-PARAM(f4) = 0.0038027011;
		ADJACENT-UP(f4,f5) = true;
		ARRIVE-PARAM(f5) = 0.0035947466;
		ADJACENT-UP(f5,f6) = true;
		ARRIVE-PARAM(f6) = 0.0051175896;
		ADJACENT-UP(f6,f7) = true;
		ARRIVE-PARAM(f7) = 0.006764965;
		ADJACENT-UP(f7,f8) = true;
		ARRIVE-PARAM(f8) = 0.005151018;
		ADJACENT-UP(f8,f9) = true;
		ARRIVE-PARAM(f9) = 0.004013324;
		ADJACENT-UP(f9,f10) = true;
		ARRIVE-PARAM(f10) = 0.002316151;
		ADJACENT-UP(f10,f11) = true;
		ARRIVE-PARAM(f11) = 0.0025416345;
		ADJACENT-UP(f11,f12) = true;
		ARRIVE-PARAM(f12) = 0.0062331227;
		ADJACENT-UP(f12,f13) = true;
		ARRIVE-PARAM(f13) = 0.0031234382;
		ADJACENT-UP(f13,f14) = true;
		ARRIVE-PARAM(f14) = 0.003914555;
		ADJACENT-UP(f14,f15) = true;
		ARRIVE-PARAM(f15) = 0.002762787;
		ADJACENT-UP(f15,f16) = true;
		ARRIVE-PARAM(f16) = 0.0032575165;
		ADJACENT-UP(f16,f17) = true;
		ARRIVE-PARAM(f17) = 0.0038409194;
		ADJACENT-UP(f17,f18) = true;
		ARRIVE-PARAM(f18) = 0.003298726;
		ADJACENT-UP(f18,f19) = true;
		ARRIVE-PARAM(f19) = 0.006516017;
		ADJACENT-UP(f19,f20) = true;
		ARRIVE-PARAM(f20) = 0.0041936412;
		ADJACENT-UP(f20,f21) = true;
		ARRIVE-PARAM(f21) = 0.002837598;
		ADJACENT-UP(f21,f22) = true;
		ARRIVE-PARAM(f22) = 0.0033205377;
		ADJACENT-UP(f22,f23) = true;
		ARRIVE-PARAM(f23) = 0.0037939737;
		ADJACENT-UP(f23,f24) = true;
		ARRIVE-PARAM(f24) = 0.0058141877;
		ADJACENT-UP(f24,f25) = true;
		ARRIVE-PARAM(f25) = 0.0046753464;
		ADJACENT-UP(f25,f26) = true;
		ARRIVE-PARAM(f26) = 0.003267592;
		ADJACENT-UP(f26,f27) = true;
		ARRIVE-PARAM(f27) = 0.00399846;
		ADJACENT-UP(f27,f28) = true;
		ARRIVE-PARAM(f28) = 0.0026363612;
		ADJACENT-UP(f28,f29) = true;
		ARRIVE-PARAM(f29) = 0.0063741836;
		ADJACENT-UP(f29,f30) = true;
		ARRIVE-PARAM(f30) = 0.0060445056;
		ADJACENT-UP(f30,f31) = true;
		ARRIVE-PARAM(f31) = 0.0040376117;
		ADJACENT-UP(f31,f32) = true;
		ARRIVE-PARAM(f32) = 0.0042607267;
		ADJACENT-UP(f32,f33) = true;
		ARRIVE-PARAM(f33) = 0.0065171137;
		ADJACENT-UP(f33,f34) = true;
		ARRIVE-PARAM(f34) = 0.003076546;
		ADJACENT-UP(f34,f35) = true;
		ARRIVE-PARAM(f35) = 0.004629009;
		ADJACENT-UP(f35,f36) = true;
		ARRIVE-PARAM(f36) = 0.002533284;
		ADJACENT-UP(f36,f37) = true;
		ARRIVE-PARAM(f37) = 0.0034443652;
		ADJACENT-UP(f37,f38) = true;
		ARRIVE-PARAM(f38) = 0.0067119347;
		ADJACENT-UP(f38,f39) = true;
		ARRIVE-PARAM(f39) = 0.0053962143;
		ADJACENT-UP(f39,f40) = true;
		ARRIVE-PARAM(f40) = 0.0037393158;
		ADJACENT-UP(f40,f41) = true;
		ARRIVE-PARAM(f41) = 0.005079705;
		ADJACENT-UP(f41,f42) = true;
		ARRIVE-PARAM(f42) = 0.0041104066;
		ADJACENT-UP(f42,f43) = true;
		TOP-FLOOR(f43) = true;
		BOTTOM-FLOOR(f0) = true;
 	}; 
 }
instance new_elevators_inst_mdp__20 { 
	domain = new_elevators_mdp; 
 	non-fluents = nf_new_elevators_inst_mdp__20;
	init-state { 
		elevator-at-floor(e0,f0);
		elevator-at-floor(e1,f0);
		elevator-at-floor(e2,f0);
		elevator-at-floor(e3,f0);
		elevator-at-floor(e4,f0);
		elevator-at-floor(e5,f0);
		elevator-at-floor(e6,f0);
		elevator-at-floor(e7,f0);
		elevator-at-floor(e8,f0);
		elevator-at-floor(e9,f0);
		elevator-at-floor(e10,f0);
	};
	max-nondef-actions = 11;
	horizon = 40;
	discount = 1.0;
} 


non-fluents nf_new_elevators_inst_mdp__1 {
	domain = new_elevators_mdp; 
	objects { 
		elevator : {e0};
		floor : {f0,f1,f2 }; 
	}; 
	non-fluents {
		ELEVATOR-PENALTY-RIGHT-DIR = 0.75;
		ELEVATOR-PENALTY-WRONG-DIR = 3.0;
		ADJACENT-UP(f0,f1) = true;
		ARRIVE-PARAM(f1) = 0.14635538;
		ADJACENT-UP(f1,f2) = true;
		TOP-FLOOR(f2) = true;
		BOTTOM-FLOOR(f0) = true;
 	}; 
 }
instance new_elevators_inst_mdp__1 { 
	domain = new_elevators_mdp; 
 	non-fluents = nf_new_elevators_inst_mdp__1;
	init-state { 
		elevator-at-floor(e0,f0);
person-waiting-up(f1);
	};
	max-nondef-actions = 1;
	horizon = 40;
	discount = 1.0;
} 


non-fluents nf_new_elevators_inst_mdp__10 {
	domain = new_elevators_mdp; 
	objects { 
		elevator : {e0};
		floor : {f0,f1,f2,f3,f4,f5 }; 
	}; 
	non-fluents {
		ELEVATOR-PENALTY-RIGHT-DIR = 0.75;
		ELEVATOR-PENALTY-WRONG-DIR = 3.0;
		ADJACENT-UP(f0,f1) = true;
		ARRIVE-PARAM(f1) = 0.019988691;
		ADJACENT-UP(f1,f2) = true;
		ARRIVE-PARAM(f2) = 0.03846489;
		ADJACENT-UP(f2,f3) = true;
		ARRIVE-PARAM(f3) = 0.024069317;
		ADJACENT-UP(f3,f4) = true;
		ARRIVE-PARAM(f4) = 0.025387743;
		ADJACENT-UP(f4,f5) = true;
		TOP-FLOOR(f5) = true;
		BOTTOM-FLOOR(f0) = true;
 	}; 
 }
instance new_elevators_inst_mdp__10 { 
	domain = new_elevators_mdp; 
 	non-fluents = nf_new_elevators_inst_mdp__10;
	init-state { 
		elevator-at-floor(e0,f0);
	};
	max-nondef-actions = 1;
	horizon = 40;
	discount = 1.0;
} 


non-fluents nf_new_elevators_inst_mdp__2 {
	domain = new_elevators_mdp; 
	objects { 
		elevator : {e0,e1};
		floor : {f0,f1,f2 }; 
	}; 
	non-fluents {
		ELEVATOR-PENALTY-RIGHT-DIR = 0.75;
		ELEVATOR-PENALTY-WRONG-DIR = 3.0;
		ADJACENT-UP(f0,f1) = true;
		ARRIVE-PARAM(f1) = 0.07776069;
		ADJACENT-UP(f1,f2) = true;
		TOP-FLOOR(f2) = true;
		BOTTOM-FLOOR(f0) = true;
 	}; 
 }
instance new_elevators_inst_mdp__2 { 
	domain = new_elevators_mdp; 
 	non-fluents = nf_new_elevators_inst_mdp__2;
	init-state { 
		elevator-at-floor(e0,f0);
		elevator-at-floor(e1,f0);
	};
	max-nondef-actions = 2;
	horizon = 40;
	discount = 1.0;
} 


non-fluents nf_new_elevators_inst_mdp__3 {
	domain = new_elevators_mdp; 
	objects { 
		elevator : {e0,e1};
		floor : {f0,f1,f2 }; 
	}; 
	non-fluents {
		ELEVATOR-PENALTY-RIGHT-DIR = 0.75;
		ELEVATOR-PENALTY-WRONG-DIR = 3.0;
		ADJACENT-UP(f0,f1) = true;
		ARRIVE-PARAM(f1) = 0.23324005;
		ADJACENT-UP(f1,f2) = true;
		TOP-FLOOR(f2) = true;
		BOTTOM-FLOOR(f0) = true;
 	}; 
 }
instance new_elevators_inst_mdp__3 { 
	domain = new_elevators_mdp; 
 	non-fluents = nf_new_elevators_inst_mdp__3;
	init-state { 
		elevator-at-floor(e0,f0);
		elevator-at-floor(e1,f0);
	};
	max-nondef-actions = 2;
	horizon = 40;
	discount = 1.0;
} 


non-fluents nf_new_elevators_inst_mdp__4 {
	domain = new_elevators_mdp; 
	objects { 
		elevator : {e0};
		floor : {f0,f1,f2,f3 }; 
	}; 
	non-fluents {
		ELEVATOR-PENALTY-RIGHT-DIR = 0.75;
		ELEVATOR-PENALTY-WRONG-DIR = 3.0;
		ADJACENT-UP(f0,f1) = true;
		ARRIVE-PARAM(f1) = 0.051886387;
		ADJACENT-UP(f1,f2) = true;
		ARRIVE-PARAM(f2) = 0.070308864;
		ADJACENT-UP(f2,f3) = true;
		TOP-FLOOR(f3) = true;
		BOTTOM-FLOOR(f0) = true;
 	}; 
 }
instance new_elevators_inst_mdp__4 { 
	domain = new_elevators_mdp; 
 	non-fluents = nf_new_elevators_inst_mdp__4;
	init-state { 
		elevator-at-floor(e0,f0);
	};
	max-nondef-actions = 1;
	horizon = 40;
	discount = 1.0;
} 


non-fluents nf_new_elevators_inst_mdp__5 {
	domain = new_elevators_mdp; 
	objects { 
		elevator : {e0,e1};
		floor : {f0,f1,f2,f3 }; 
	}; 
	non-fluents {
		ELEVATOR-PENALTY-RIGHT-DIR = 0.75;
		ELEVATOR-PENALTY-WRONG-DIR = 3.0;
		ADJACENT-UP(f0,f1) = true;
		ARRIVE-PARAM(f1) = 0.06492667;
		ADJACENT-UP(f1,f2) = true;
		ARRIVE-PARAM(f2) = 0.08997825;
		ADJACENT-UP(f2,f3) = true;
		TOP-FLOOR(f3) = true;
		BOTTOM-FLOOR(f0) = true;
 	}; 
 }
instance new_elevators_inst_mdp__5 { 
	domain = new_elevators_mdp; 
 	non-fluents = nf_new_elevators_inst_mdp__5;
	init-state { 
		elevator-at-floor(e0,f0);
		elevator-at-floor(e1,f0);
	};
	max-nondef-actions = 2;
	horizon = 40;
	discount = 1.0;
} 


non-fluents nf_new_elevators_inst_mdp__6 {
	domain = new_elevators_mdp; 
	objects { 
		elevator : {e0,e1};
		floor : {f0,f1,f2,f3 }; 
	}; 
	non-fluents {
		ELEVATOR-PENALTY-RIGHT-DIR = 0.75;
		ELEVATOR-PENALTY-WRONG-DIR = 3.0;
		ADJACENT-UP(f0,f1) = true;
		ARRIVE-PARAM(f1) = 0.089050114;
		ADJACENT-UP(f1,f2) = true;
		ARRIVE-PARAM(f2) = 0.1175044;
		ADJACENT-UP(f2,f3) = true;
		TOP-FLOOR(f3) = true;
		BOTTOM-FLOOR(f0) = true;
 	}; 
 }
instance new_elevators_inst_mdp__6 { 
	domain = new_elevators_mdp; 
 	non-fluents = nf_new_elevators_inst_mdp__6;
	init-state { 
		elevator-at-floor(e0,f0);
		elevator-at-floor(e1,f0);
	};
	max-nondef-actions = 2;
	horizon = 40;
	discount = 1.0;
} 


non-fluents nf_new_elevators_inst_mdp__7 {
	domain = new_elevators_mdp; 
	objects { 
		elevator : {e0};
		floor : {f0,f1,f2,f3,f4 }; 
	}; 
	non-fluents {
		ELEVATOR-PENALTY-RIGHT-DIR = 0.75;
		ELEVATOR-PENALTY-WRONG-DIR = 3.0;
		ADJACENT-UP(f0,f1) = true;
		ARRIVE-PARAM(f1) = 0.057459753;
		ADJACENT-UP(f1,f2) = true;
		ARRIVE-PARAM(f2) = 0.04761868;
		ADJACENT-UP(f2,f3) = true;
		ARRIVE-PARAM(f3) = 0.041935332;
		ADJACENT-UP(f3,f4) = true;
		TOP-FLOOR(f4) = true;
		BOTTOM-FLOOR(f0) = true;
 	}; 
 }
instance new_elevators_inst_mdp__7 { 
	domain = new_elevators_mdp; 
 	non-fluents = nf_new_elevators_inst_mdp__7;
	init-state { 
		elevator-at-floor(e0,f0);
	};
	max-nondef-actions = 1;
	horizon = 40;
	discount = 1.0;
} 


non-fluents nf_new_elevators_inst_mdp__8 {
	domain = new_elevators_mdp; 
	objects { 
		elevator : {e0,e1};
		floor : {f0,f1,f2,f3,f4 }; 
	}; 
	non-fluents {
		ELEVATOR-PENALTY-RIGHT-DIR = 0.75;
		ELEVATOR-PENALTY-WRONG-DIR = 3.0;
		ADJACENT-UP(f0,f1) = true;
		ARRIVE-PARAM(f1) = 0.04416793;
		ADJACENT-UP(f1,f2) = true;
		ARRIVE-PARAM(f2) = 0.07763073;
		ADJACENT-UP(f2,f3) = true;
		ARRIVE-PARAM(f3) = 0.057016928;
		ADJACENT-UP(f3,f4) = true;
		TOP-FLOOR(f4) = true;
		BOTTOM-FLOOR(f0) = true;
 	}; 
 }
instance new_elevators_inst_mdp__8 { 
	domain = new_elevators_mdp; 
 	non-fluents = nf_new_elevators_inst_mdp__8;
	init-state { 
		elevator-at-floor(e0,f0);
		elevator-at-floor(e1,f0);
	};
	max-nondef-actions = 2;
	horizon = 40;
	discount = 1.0;
} 


non-fluents nf_new_elevators_inst_mdp__9 {
	domain = new_elevators_mdp; 
	objects { 
		elevator : {e0,e1};
		floor : {f0,f1,f2,f3,f4 }; 
	}; 
	non-fluents {
		ELEVATOR-PENALTY-RIGHT-DIR = 0.75;
		ELEVATOR-PENALTY-WRONG-DIR = 3.0;
		ADJACENT-UP(f0,f1) = true;
		ARRIVE-PARAM(f1) = 0.06957142;
		ADJACENT-UP(f1,f2) = true;
		ARRIVE-PARAM(f2) = 0.06842119;
		ADJACENT-UP(f2,f3) = true;
		ARRIVE-PARAM(f3) = 0.080825426;
		ADJACENT-UP(f3,f4) = true;
		TOP-FLOOR(f4) = true;
		BOTTOM-FLOOR(f0) = true;
 	}; 
 }
instance new_elevators_inst_mdp__9 { 
	domain = new_elevators_mdp; 
 	non-fluents = nf_new_elevators_inst_mdp__9;
	init-state { 
		elevator-at-floor(e0,f0);
		elevator-at-floor(e1,f0);
	};
	max-nondef-actions = 2;
	horizon = 40;
	discount = 1.0;
} 


