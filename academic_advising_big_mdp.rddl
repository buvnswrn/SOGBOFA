///////////////////////////////////////////////////////////////
//
// Academic Advising Domain
//
// Author:  Libby Ferland (libby.knouse@uky.edu)
//
// In this domain, a student may take courses at a given cost
// and passes the course with a probability determined by how
// many of the prerequisites they have successfully passed.
// A student also receives a penalty at each time step if they
// have not yet graduated from their program (i.e., completed
// all required courses).  We allow multiple courses to be
// taken in a semester in some instances.
//
// Modified for competition and translation purposes by Scott Sanner.
//
///////////////////////////////////////////////////////////////

domain academic_advising_big_mdp {
	requirements = {
//		constrained-state,
		reward-deterministic
	};

  types {
    course : object;
  };

  pvariables {

    // Nonfluents: course prerequisites
    PREREQ(course, course) : { non-fluent, bool, default = false }; // First argument is a prereq of second argument

    // Nonfluents: course passing probabilities
    PRIOR_PROB_PASS_NO_PREREQ(course) : { non-fluent, real, default = 0.8 }; // Probability of passing a course with no prereqs
    PRIOR_PROB_PASS(course)           : { non-fluent, real, default = 0.2 }; // Probability of passing a course regardless of prereq status
    
    // Nonfluents: program requirements for graduation
    PROGRAM_REQUIREMENT(course) : { non-fluent, bool, default = false }; // Specifies whether course is program requirement 
    
    // Nonfluents: costs/penalties
    COURSE_COST(course)        : { non-fluent, real, default = -1 }; // Cost for taking a course
    COURSE_RETAKE_COST(course) : { non-fluent, real, default = -2 }; // Cost for re-taking a course (heavily discouraged)
    PROGRAM_INCOMPLETE_PENALTY : { non-fluent, real, default = -5 }; // Penalty at each time step for having an incomplete program

	// State
    passed(course) : { state-fluent, bool, default = false };
    taken(course)  : { state-fluent, bool, default = false };

	// Action
    takeCourse(course)   : { action-fluent, bool, default = false };
  };

  cpfs {

	// Determine whether each course was passed
	// Modification: differentiate courses with no prereqs since should be easier to pass such introductory courses
	// For courses with prereqs:
	//   if PRIOR_PROB_PASS=.2 and 0 out of 3 prereqs were taken, the distribution is Bernoulli(.2 + .8 * (0/4)) = Bernoulli(.2)
	//                             1 out of 3 prereqs were taken, the distribution is Bernoulli(.2 + .8 * (1/4)) = Bernoulli(.4)
	//                             3 out of 3 prereqs were taken, the distribution is Bernoulli(.2 + .8 * (3/4)) = Bernoulli(.8)
    passed'(?c) = 
    	if (takeCourse(?c) ^ ~passed(?c)) // If take a course and not already passed 
			then [ if (~exists_{?c2 : course} PREREQ(?c2,?c))
			       then Bernoulli( PRIOR_PROB_PASS_NO_PREREQ(?c) )  
			       else Bernoulli((PRIOR_PROB_PASS(?c)) + 
			                      (1 - PRIOR_PROB_PASS(?c))*[[sum_{?c2 : course} (PREREQ(?c2,?c) ^ passed(?c2))] 
								                             / [1 + sum_{?c2 : course} PREREQ(?c2,?c)]]) ]
			else
				passed(?c); // Value persists if course not taken or already passed
	
	taken'(?c) = taken(?c) | takeCourse(?c);

  };

  // A student is assessed a cost for taking each course and a penalty for not completing their program   
  reward = 
 	  [sum_{?c : course} [COURSE_COST(?c) * (takeCourse(?c) ^ ~taken(?c))]]
 	+ [sum_{?c : course} [COURSE_RETAKE_COST(?c) * (takeCourse(?c) ^ taken(?c))]]
 	+ [PROGRAM_INCOMPLETE_PENALTY * ~[forall_{?c : course} (PROGRAM_REQUIREMENT(?c) => passed(?c))]];

}     
 
non-fluents nf_academic_advising_big_inst_mdp__10 {
	domain = academic_advising_big_mdp;
	objects {
		course : {CS11, CS12, CS13, CS14, CS15, CS16, CS21, CS22, CS23, CS24, CS25, CS26, CS31, CS32, CS33, CS34, CS35, CS36, CS41, CS42, CS43, CS44, CS45, CS46, CS51, CS52, CS53, CS54, CS55, CS56};
	};

	non-fluents {
		PROGRAM_REQUIREMENT(CS11);
		PROGRAM_REQUIREMENT(CS13);
		PREREQ(CS14,CS21);
		PREREQ(CS13,CS21);
		PREREQ(CS12,CS21);
		PREREQ(CS11,CS22);
		PREREQ(CS13,CS22);
		PREREQ(CS14,CS22);
		PREREQ(CS21,CS23);
		PREREQ(CS15,CS23);
		PREREQ(CS23,CS24);
		PREREQ(CS13,CS24);
		PREREQ(CS13,CS25);
		PREREQ(CS23,CS25);
		PREREQ(CS21,CS25);
		PROGRAM_REQUIREMENT(CS25);
		PREREQ(CS22,CS26);
		PREREQ(CS21,CS26);
		PREREQ(CS24,CS26);
		PREREQ(CS23,CS31);
		PREREQ(CS22,CS31);
		PREREQ(CS21,CS31);
		PROGRAM_REQUIREMENT(CS31);
		PREREQ(CS13,CS32);
		PREREQ(CS26,CS32);
		PREREQ(CS11,CS32);
		PROGRAM_REQUIREMENT(CS32);
		PREREQ(CS23,CS33);
		PREREQ(CS22,CS33);
		PREREQ(CS21,CS33);
		PREREQ(CS21,CS34);
		PREREQ(CS12,CS34);
		PREREQ(CS11,CS34);
		PREREQ(CS21,CS35);
		PREREQ(CS31,CS35);
		PREREQ(CS26,CS35);
		PROGRAM_REQUIREMENT(CS35);
		PREREQ(CS22,CS36);
		PREREQ(CS23,CS36);
		PREREQ(CS32,CS36);
		PREREQ(CS11,CS36);
		PREREQ(CS35,CS41);
		PREREQ(CS25,CS41);
		PREREQ(CS15,CS41);
		PROGRAM_REQUIREMENT(CS41);
		PREREQ(CS21,CS42);
		PREREQ(CS22,CS42);
		PROGRAM_REQUIREMENT(CS42);
		PREREQ(CS21,CS43);
		PREREQ(CS42,CS43);
		PREREQ(CS33,CS43);
		PREREQ(CS34,CS43);
		PREREQ(CS34,CS44);
		PREREQ(CS13,CS44);
		PREREQ(CS24,CS44);
		PROGRAM_REQUIREMENT(CS44);
		PREREQ(CS32,CS45);
		PREREQ(CS35,CS45);
		PREREQ(CS33,CS46);
		PREREQ(CS23,CS46);
		PREREQ(CS41,CS46);
		PREREQ(CS42,CS51);
		PREREQ(CS45,CS51);
		PREREQ(CS13,CS51);
		PREREQ(CS23,CS52);
		PREREQ(CS43,CS52);
		PREREQ(CS36,CS52);
		PREREQ(CS42,CS53);
		PREREQ(CS36,CS53);
		PREREQ(CS13,CS53);
		PREREQ(CS21,CS53);
		PREREQ(CS33,CS54);
		PREREQ(CS45,CS54);
		PREREQ(CS54,CS55);
		PREREQ(CS24,CS55);
		PREREQ(CS32,CS55);
		PREREQ(CS52,CS55);
		PROGRAM_REQUIREMENT(CS55);
		PREREQ(CS31,CS56);
		PREREQ(CS42,CS56);
		PREREQ(CS53,CS56);
		PROGRAM_REQUIREMENT(CS56);
	};
}

instance academic_advising_big_inst_mdp__1 {
	domain = academic_advising_big_mdp;
	non-fluents = nf_academic_advising_big_inst_mdp__10;
	max-nondef-actions = 1;
	horizon  = 40;
	discount = 1.0;
}

instance academic_advising_big_inst_mdp__2 {
	domain = academic_advising_big_mdp;
	non-fluents = nf_academic_advising_big_inst_mdp__10;
	max-nondef-actions = 3;
	horizon  = 40;
	discount = 1.0;
}

instance academic_advising_big_inst_mdp__3 {
	domain = academic_advising_big_mdp;
	non-fluents = nf_academic_advising_big_inst_mdp__10;
	max-nondef-actions = 5;
	horizon  = 40;
	discount = 1.0;
}

instance academic_advising_big_inst_mdp__4 {
	domain = academic_advising_big_mdp;
	non-fluents = nf_academic_advising_big_inst_mdp__10;
	max-nondef-actions = 7;
	horizon  = 40;
	discount = 1.0;
}

instance academic_advising_big_inst_mdp__5 {
	domain = academic_advising_big_mdp;
	non-fluents = nf_academic_advising_big_inst_mdp__10;
	max-nondef-actions = 9;
	horizon  = 40;
	discount = 1.0;
}

instance academic_advising_big_inst_mdp__6 {
	domain = academic_advising_big_mdp;
	non-fluents = nf_academic_advising_big_inst_mdp__10;
	max-nondef-actions = 11;
	horizon  = 40;
	discount = 1.0;
}

instance academic_advising_big_inst_mdp__7 {
	domain = academic_advising_big_mdp;
	non-fluents = nf_academic_advising_big_inst_mdp__10;
	max-nondef-actions = 13;
	horizon  = 40;
	discount = 1.0;
}

instance academic_advising_big_inst_mdp__8 {
	domain = academic_advising_big_mdp;
	non-fluents = nf_academic_advising_big_inst_mdp__10;
	max-nondef-actions = 15;
	horizon  = 40;
	discount = 1.0;
}

